package com.bp3x.raidbot.commands.lfg;

import com.bp3x.raidbot.commands.lfg.util.Event;
import com.jagrosh.jdautilities.command.Command;
import com.jagrosh.jdautilities.command.CommandEvent;
import net.dv8tion.jda.api.entities.Member;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Reminder Command to ping selected players.
 */
public class RemindCommand extends Command {
    private final Logger log = LoggerFactory.getLogger(RemindCommand.class);

    private static final String REMINDER_HELP_EXAMPLE = "Use to @ Accepted or Tentative players on an event without having to @ everyone individually in a message.\n" + "\nExample:\n" +
            "`!remind 5241 accepted` or `!remind 5241 tentative`\n" + "Note: Event ID can be found on the Embed generated by the bot below Player Count.\n";
    public RemindCommand() {
        this.name = "remind";
        this.help = REMINDER_HELP_EXAMPLE;
        this.arguments = "<eventID> <playerCategory>";
        this.guildOnly = false;
        this.ownerCommand = false;
    }

    @Override
    protected void execute(CommandEvent event) {
        log.info("Reminder command by: " + event.getAuthor().getName() + "#" + event.getAuthor().getDiscriminator());
        log.info("Reminding for " + event.getArgs());

        String[] args = event.getArgs().split("\\s+");
        if (args.length == 2) {
            if (args[1].equalsIgnoreCase("accepted") || args[1].equalsIgnoreCase("tentative")) {
                // Retrieve event ID data and then add the names of the users in the accepted list
                Event remindEvent = Event.getEventById(args[0]);
                if (remindEvent != null) {
                    log.info("hasActiveParticipants = " + remindEvent.hasActiveParticipants());
                    if (remindEvent.hasActiveParticipants()) {
                        event.getChannel().sendMessage("Players reminded:\n" + buildReminderString(remindEvent, event)).queue();
                    } else {
                        event.getChannel().sendMessage("There are no players to remind.").queue();
                    }
                } else {
                    event.getChannel().sendMessage("That event does not exist.").queue();
                }
            } else {
                event.getChannel().sendMessage("Missing or invalid parameters. Usage: `!remind <event id> accepted` or `!remind <event id> tentative`").queue();
            }
        }
    }

    private String buildReminderString(Event remindEvent, CommandEvent event) {
        String[] args = event.getArgs().split("\\s+");
        StringBuilder sb = new StringBuilder();

        if (args[1].equalsIgnoreCase("accepted")) {
            for (Member player : remindEvent.getAcceptedPlayers()) {
                sb.append(player.getAsMention()).append(LFGConstants.ACCEPTED_EMOJI_STRING);
                sb.append("\n");
            }
        } else if (args[1].equalsIgnoreCase("tentative")) {
            for (Member player : remindEvent.getTentativePlayers()) {
                sb.append(player.getAsMention()).append(LFGConstants.TENTATIVE_EMOJI_STRING);
                sb.append("\n");
            }
        } else {
            event.getChannel().sendMessage("Usage: !remind " + remindEvent.getEventId() + " accepted or tentative").queue();
        }
    return sb.toString();
    }
}
